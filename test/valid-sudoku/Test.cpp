#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include <valid-sudoku/Solution.hpp>

class ValidSudokuTest : public ::testing::Test
{
protected:
    ValidSudokuTest() {}
    virtual ~ValidSudokuTest() {}
    virtual void SetUp() override
    {
    }
    virtual void TearDown() override
    {
    }

    Solution solution;

    std::vector<std::vector<char>> sudoku1 = {
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

    std::vector<std::vector<char>> sudoku2 = {
        {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

    std::vector<std::vector<char>> sudoku3 =
        {{'.', '.', '.', '.', '5', '.', '.', '1', '.'},
         {'.', '4', '.', '3', '.', '.', '.', '.', '.'},
         {'.', '.', '.', '.', '.', '3', '.', '.', '1'},
         {'8', '.', '.', '.', '.', '.', '.', '2', '.'},
         {'.', '.', '2', '.', '7', '.', '.', '.', '.'},
         {'.', '1', '5', '.', '.', '.', '.', '.', '.'},
         {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
         {'.', '2', '.', '9', '.', '.', '.', '.', '.'},
         {'.', '.', '4', '.', '.', '.', '.', '.', '.'}};
};

TEST_F(ValidSudokuTest, Example)
{
    EXPECT_TRUE(solution.isValidSudoku(sudoku1));
    EXPECT_FALSE(solution.isValidSudoku(sudoku2));
    EXPECT_FALSE(solution.isValidSudoku(sudoku3));
}